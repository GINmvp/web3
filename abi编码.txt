1.ABI 编码中的 uint<M> 表示什么？
    代表无符号整数，长度时M

2.在 ABI 中，动态类型和静态类型有什么区别？
    静态类型长度固定，abi编码会根据固定长度直接进行编码

    动态类型长度不固定，只有在接收的具体参数才会确定长度
    所以动态类型的abi编码需要先预留偏移量然后在数据区编码实际内容


3.解释函数选择器(function selector)在 ABI 中的用途。
    函数选择器是 ABI 中用于标识特定函数调用的一个 4 字节（32 位）的哈希值
    它通过取函数签名的前 4 个字节来生成，函数签名包括函数名称及其参数类型。

    通过函数选择器来指定调用的函数

4.在 Solidity 中，哪些类型不被 ABI 直接支持？
    结构体
    映射
    库合约
    自定义类型
    不能被ABI编码直接支持，需要先转化为ABI支持的类型再进行编码


5.如何通过 ABI 编码调用具有多个参数的函数？
    先计算函数选择器
    再将参数通过abi.encode进行编码，
    静态类型直接编码，动态类型需要先预留偏移量然后在数据区编码实际内容

6.什么是“严格编码模式”？
    严格的数据格式:
        在编码和解码过程中，确保所有数据类型都符合预定的 ABI 格式。这包括正确的字节长度、排列顺序和对齐。
    避免隐式转换:
        严格编码模式下，所有参数和返回值的类型都必须明确，避免隐式转换和类型混淆。
    输入验证:
        在函数调用时，严格检查传入参数的类型和长度，确保它们与 ABI 定义的一致。
    错误处理:
        在解码过程中，若输入数据不符合预期格式，应及时抛出错误，而不是默默地返回错误结果。

7.在 ABI 中，fixed<M>x<N> 和 ufixed<M>x<N> 有何不同？
    在 ABI 中，fixed<M>x<N> 和 ufixed<M>x<N> 是用于表示定点数的类型，
    主要用于需要高精度但不想使用浮点数的场合。它们之间的主要区别在于是否支持负数。

    fixed<M>x<N>: 这是一个有符号定点数类型，允许表示正数和负数。M 表示总的位数，N 表示小数点后的位数。
        例如，fixed128x18 可以表示范围大约为 ±2^127，精度为 18 位小数。
    ufixed<M>x<N>: 这是一个无符号定点数类型，只能表示非负数（0 和正数）。M 和 N 的定义与 fixed 类型相同，但不支持负数。
        例如，ufixed128x18 的范围是 0 到约 2^128。

8.事件的 ABI 编码如何处理已索引和未索引的参数？


9.描述如何通过 ABI 对一个返回错误的函数进行编码。


10.abi.encodePacked() 在什么情况下使用，它与 abi.encode() 有何区别？
    abi.encodePacked() 是一种更轻量级的编码方式，它将多个参数合并成一个字节数组，但是中间不会用0填充
    它主要用于将多个参数合并成一个字节数组，以节省gas费用。
    使用encodePacked需要注意避免出现hash冲突

    abi.encode() 是一种更完整的编码方式，它将每个参数编码成一个单独的字节数组，并按照参数的顺序进行编码，且参数之间会用0填充。
    它主要用于将多个参数编码成一个完整的字节数组，以保持参数的顺序。

11.解释 ABI 中对动态数组编码的过程。
    编码数组长度
        动态数组首先需要编码其长度。长度是一个 uint256 值，表示数组中元素的数量。
    接下来，对数组中的每个元素进行编码。元素的编码方式取决于元素的类型。不同类型的元素有不同的编码规则，例如：
        基本类型（如 uint256、address 等）: 直接编码为 32 字节（32 bytes）。
        引用类型（如 string、bytes、其他结构体或数组）: 首先编码其长度，然后编码其内容。

12.如何在 ABI 中处理嵌套数组或结构体？
    在 ABI 中处理嵌套数组或结构体的过程相对复杂，但遵循相似的编码原则:
        编码数组或结构体的长度
            对于每个动态数组，首先编码其长度为 uint256，表示数组中元素的数量。
        编码数组或结构体的元素
            接下来，对数组中的每个元素进行编码。如果元素是基本类型，直接编码为 32 字节；如果元素是嵌套的数组或结构体，则递归执行编码。
        处理嵌套结构体
            如果数组的元素是结构体，首先编码结构体的字段。每个字段按照其类型进行编码，嵌套结构体同样按上述规则处理。