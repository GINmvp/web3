1.什么情况下应该使用 `uint` 或 `int`?
    在存储整数或是整数运算的时候


2.如何选择存储以太坊地址使用的数据结构？
    address、address[]、mapping(address=>uint)等

3.在何时使用 `string` 与 `bytes`?
    在存储动态的字符串（长度不固定）的时候可以使用string
    在存储定长字符串或者不需要进行Unicode编码的字符串的时候可以使用bytes

    在对处理string字符串的时候需要将string转成bytes，比如获取字符串长度的时候，string没有提供获取字符串长度的api，需要将string转成bytes，再进行操作

4.数组在 Solidity 中的应用场景是什么？
    数组可以理解为List，用于存储相同类型的数据
    在需要对数据遍历的场景可以使用数组


5.为何以及如何使用 `mapping`?
    hash表，在需要存储键值对数据的场景可以使用mapping
    mapping也可以用作查询:
        查询一个key在mapping中是否存在的效率是O(1)


6.`struct` 的用途及实例?
    可以理解为实体对象
    在需要使用一些复杂的抽象场合可以使用结构体


7.何时使用 `enum` 以及其好处是什么？


8.在设计合约时如何考虑存储和 Gas 成本？
    使用较小的数据结构比如uint8而不是uint256可以节省存储成本
        但是使用小数据结构的时候需要注意越界问题
    在查询一个数据是否存在的场景，使用mapping 而不是array可以节省Gas成本
    尽可能较少的访问和修改状态变量
    尽量避免遍历列表
    将一些操作批量化

10.如何根据数据访问模式选择数据结构？


11.在复杂合约中选择数据结构的考虑因素有哪些？



12如何决定使用固定长度的数组还是动态数组？
    事先知道数组大小以及否需要动态扩展
    如果是固定大小且不需要扩容的情况，使用固定长度的数组
    否则使用动态数组

13.在 Solidity 中使用 `mapping` 和 `array` 的主要区别及使用场景是什么？
    mapping常使用在需要查询和对指定数据的更新的场景
    array常使用在需要遍历迭代的场景


14如何利用 `struct` 在 Solidity 中模拟传统的数据库表？
    数据库表的列可以理解为结构体的属性
    struct table{
        uint id;
        string name;
        uint age;
        ........
    }


15.Solidity 中 `enum` 如何帮助降低错误的发生？

16.为何 `bytes` 类型有时比 `string` 更优？
    bytes类型存储的二进制数据比string更节省空间，并且可以处理更复杂的数据类型，如二进制数据。

17如何选择在 Solidity 中存储时间的最佳数据结构？
    使用uint256存储区块时间戳

18.在 Solidity 合约中，何时应考虑将数据封装在 `struct` 内部？


19`mapping` 类型是否支持迭代？如果不支持，如何解决？
    solidity中的原生mapping不支持迭代。
    如果需要可以使用array来
    当然OpenZeppelin提供了一些三方的库来支持mapping的迭代

20.在设计一个包含多种资产类型的钱包合约时，应使用哪种数据结构？
    可以使用mapping嵌套


使用 `enum` 定义状态时，应如何处理状态的转换逻辑？
    
